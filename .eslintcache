[{"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\index.js":"1","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\App.js":"2","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\navbar.js":"4","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listview.js":"5","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listitem.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":264,"mtime":1607483545506,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":5626,"mtime":1607505635115,"results":"11","hashOfConfig":"8"},{"size":1121,"mtime":1607501837628,"results":"12","hashOfConfig":"8"},{"size":5074,"mtime":1607506904378,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1rkjruj",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\index.js",[],["29","30"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\App.js",["31"],"import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './navbar.js';\nimport { SnackbarProvider } from 'notistack';\n\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <NavBar />\n   </SnackbarProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\navbar.js",["32","33"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listview.js",["34","35","36","37","38","39"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\r\nimport CardListItem from \"./listitem\";\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nexport default function SimpleList(props) {\r\n  const classes = useStyles();\r\n  let documents = null;\r\n//   React.useEffect(() => {\r\n//       setDocuments(props.documents)\r\n//   });\r\n  documents = props.documents\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"listview\" aria-label=\"documents\">\r\n        {documents.map((doc) => (\r\n            <CardListItem name={doc._source.uuid} text={doc._source.ocr_text}/>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listitem.js",["40","41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":8,"nodeType":"49","messageId":"50","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"51","line":77,"column":28,"nodeType":"49","messageId":"50","endLine":77,"endColumn":41},{"ruleId":"52","severity":1,"message":"53","line":83,"column":17,"nodeType":"54","endLine":83,"endColumn":21},{"ruleId":"47","severity":1,"message":"55","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":16},{"ruleId":"47","severity":1,"message":"56","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":20},{"ruleId":"47","severity":1,"message":"57","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":20},{"ruleId":"47","severity":1,"message":"58","line":7,"column":8,"nodeType":"49","messageId":"50","endLine":7,"endColumn":15},{"ruleId":"47","severity":1,"message":"59","line":8,"column":8,"nodeType":"49","messageId":"50","endLine":8,"endColumn":17},{"ruleId":"47","severity":1,"message":"60","line":9,"column":8,"nodeType":"49","messageId":"50","endLine":9,"endColumn":18},{"ruleId":"47","severity":1,"message":"61","line":7,"column":8,"nodeType":"49","messageId":"50","endLine":7,"endColumn":19},{"ruleId":"47","severity":1,"message":"58","line":16,"column":8,"nodeType":"49","messageId":"50","endLine":16,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":100,"column":55,"nodeType":"64","endLine":100,"endColumn":166},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'closeSnackbar' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'isLoading' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Divider' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'CardActions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]