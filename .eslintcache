[{"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\index.js":"1","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\App.js":"2","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\navbar.js":"4","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listview.js":"5","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listitem.js":"6","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\tableview.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":264,"mtime":1607483545506,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":7450,"mtime":1607579642997,"results":"12","hashOfConfig":"9"},{"size":635,"mtime":1607571641515,"results":"13","hashOfConfig":"9"},{"size":5525,"mtime":1607575157312,"results":"14","hashOfConfig":"9"},{"size":5082,"mtime":1607579642997,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1rkjruj",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\index.js",[],["33","34"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\App.js",["35"],"import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './navbar.js';\nimport { SnackbarProvider } from 'notistack';\n\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <NavBar />\n   </SnackbarProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\navbar.js",["36","37","38","39"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listview.js",[],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listitem.js",["40"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\tableview.js",["41","42"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport axios from \"axios\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\nconst columns = [\r\n  { label: 'Erroneous Sentence', id: 'errorneous_sentence', minWidth: 170 },\r\n  { label: 'Error Detected', id: 'error_detected', minWidth: 100 },\r\n  {\r\n    label: 'Additional Info',\r\n    id: 'additional_info',\r\n    minWidth: 170,\r\n  },\r\n  {\r\n    label: 'Error Word/Phrase',\r\n    id: 'error_word_phrase',\r\n    minWidth: 170,\r\n  },\r\n  {\r\n    label: 'Possible Replacements',\r\n    id: 'possible_replacements',\r\n    minWidth: 170,\r\n  },\r\n];\r\n\r\nfunction createData(errorneous_sentence, error_detected, additional_info, error_word_phrase, possible_replacements) {\r\n  return { errorneous_sentence, error_detected, additional_info, error_word_phrase, possible_replacements };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%'\r\n  },\r\n  container: {\r\n    maxHeight: '900px',\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable(props) {\r\n  const classes = useStyles();\r\n  let isLoading = false;\r\n  const [results, setResults] = React.useState(null);\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  React.useEffect(() => {\r\n    checkGrammar(props.uuid)\r\n  },[]);\r\n  \r\n  let checkGrammar = (uuid) => {\r\n    isLoading = true;\r\n    axios\r\n        .get(`https://35.239.61.25:5000/grammar`, {\r\n            params: {\r\n                uuid: uuid\r\n            }\r\n        })\r\n        .then(({ data }) => {\r\n            console.log(data)\r\n\r\n            let rows = []\r\n            let i,j;\r\n            for (i = 0; i < data.length; i++) {\r\n                let possible_replacements = \"\"\r\n                if (data[i].replacements.length > 0) {\r\n                    for (j = 0; j < data[i].replacements.length - 1; j++) {\r\n                        possible_replacements += data[i].replacements[j].value + \", \"\r\n                    }\r\n                    possible_replacements += data[i].replacements[j].value\r\n                }\r\n                let offset = data[i].context.offset\r\n                let length = data[i].context.length\r\n                let first_half = data[i].context.text.substr(0, offset)\r\n                let second_half = data[i].context.text.substr(offset + length, data[i].sentence.length)\r\n                let incorrect_word = data[i].context.text.substr(offset, length)\r\n                let full_string = <div><span style={{color:\"#000000\"}}>{first_half}</span> <span style={{color:\"#ff0000\", background: \"#FFFF00\"}}>{incorrect_word}</span><span style={{color:\"#000000\"}}>{second_half}</span></div>\r\n                rows.push(createData(full_string, data[i].shortMessage, data[i].message, incorrect_word, possible_replacements))\r\n            } \r\n            setResults(rows)\r\n            isLoading = false;\r\n            enqueueSnackbar('Grammar Check Successful!', {variant: 'success'});\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            isLoading = false;\r\n            enqueueSnackbar('Something went wrong while fetching documents. Please refresh.', {variant: 'error'});\r\n        })\r\n  }\r\n\r\n  return (\r\n    \r\n    <Paper className={classes.root}>\r\n        {!isLoading && results? (\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                    {columns.map((column) => (\r\n                        <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                        >\r\n                        {column.label}\r\n                        </TableCell>\r\n                    ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {results.map((row) => {\r\n                    return (\r\n                        <TableRow hover tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                            );\r\n                        })}\r\n                        </TableRow>\r\n                    );\r\n                    })}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            ) : <LinearProgress color=\"secondary\"/>\r\n        }\r\n    </Paper>\r\n    \r\n  );\r\n}\r\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":8,"nodeType":"49","messageId":"50","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"51","line":77,"column":10,"nodeType":"49","messageId":"50","endLine":77,"endColumn":23},{"ruleId":"47","severity":1,"message":"52","line":80,"column":28,"nodeType":"49","messageId":"50","endLine":80,"endColumn":41},{"ruleId":"53","severity":1,"message":"54","line":85,"column":17,"nodeType":"55","endLine":85,"endColumn":21},{"ruleId":"56","severity":1,"message":"57","line":202,"column":46,"nodeType":"58","messageId":"59","endLine":202,"endColumn":48},{"ruleId":"60","severity":1,"message":"61","line":110,"column":77,"nodeType":"62","endLine":110,"endColumn":188},{"ruleId":"47","severity":1,"message":"52","line":51,"column":28,"nodeType":"49","messageId":"50","endLine":51,"endColumn":41},{"ruleId":"53","severity":1,"message":"63","line":55,"column":5,"nodeType":"64","endLine":55,"endColumn":7,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'tempDocuments' is assigned a value but never used.","'closeSnackbar' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'isLoading' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook React.useEffect has missing dependencies: 'checkGrammar' and 'props.uuid'. Either include them or remove the dependency array.","ArrayExpression",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [checkGrammar, props.uuid]",{"range":"71","text":"72"},[1691,1693],"[checkGrammar, props.uuid]"]