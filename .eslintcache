[{"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\index.js":"1","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\App.js":"2","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\navbar.js":"4","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listview.js":"5","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listitem.js":"6","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\tableview.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":264,"mtime":1607483545506,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":7740,"mtime":1607636537468,"results":"12","hashOfConfig":"9"},{"size":635,"mtime":1607571641515,"results":"13","hashOfConfig":"9"},{"size":5525,"mtime":1607575157312,"results":"14","hashOfConfig":"9"},{"size":5081,"mtime":1607580259798,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1rkjruj",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\index.js",[],["34","35"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\App.js",["36"],"import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './navbar.js';\nimport { SnackbarProvider } from 'notistack';\n\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <NavBar />\n   </SnackbarProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\navbar.js",["37","38","39","40"],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listview.js",[],"C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\listitem.js",["41"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TableView from './tableview';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    margin: '10px 25px 10px 25px'\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  content: {\r\n    flex: '1 0 auto',\r\n  },\r\n  cover: {\r\n    width: 201,\r\n    height: 201\r\n  },\r\n  controls: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n  \r\nexport default function MediaControlCard(props) {\r\n  const classes = useStyles();\r\n\r\n//   const [name, setname] = React.useState(\"\");\r\n//   const [text, settext] = React.useState(\"\");\r\n//   const [uuid, setuuid] = React.useState(\"\");\r\n//   const [image, setimage] = React.useState(\"\");\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [scroll, setScroll] = React.useState('paper');\r\n  const [grammarOpen, setGrammarOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = (scrollType) => () =>{\r\n    setOpen(true);\r\n    setScroll(scrollType);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleGrammarClickOpen = () => {\r\n    setGrammarOpen(true);\r\n  };\r\n\r\n  const handleGrammarClose = () => {\r\n    setGrammarOpen(false);\r\n  };\r\n\r\n//   React.useEffect(() => {\r\n//     setname(props.doc._source.uuid)\r\n//     settext(props.doc._source.ocr_text)\r\n//     setuuid(props.doc._source.uuid)\r\n//     setimage(props.doc.image)\r\n\r\n//   }, [])\r\n\r\n  const descriptionElementRef = React.useRef(null);\r\n\r\n  return (\r\n      <div>\r\n        <Card className={classes.root}>\r\n        <CardMedia\r\n            className={classes.cover}\r\n            component='img'\r\n            src={props.doc.image}\r\n            title=\"Live from space album cover\"\r\n        />\r\n        <div className={classes.details}>\r\n            <CardContent className={classes.content}>\r\n            <Typography component=\"h5\" variant=\"h5\">\r\n                {props.doc._source.uuid}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" color=\"textSecondary\"> \r\n            {props.doc._source.ocr_text.length > 200 ? (\r\n                    <span>{props.doc._source.ocr_text.substring(0, 200)}... <a style={{color:'#6200EE', textDecoration:'underline', cursor: 'pointer'}} onClick={handleClickOpen('paper')}>Read more</a></span>\r\n                ): props.doc._source.ocr_text}\r\n            </Typography>\r\n            </CardContent>\r\n            <div className={classes.controls}>\r\n                <Button onClick={handleGrammarClickOpen}size=\"small\" variant=\"outlined\" color=\"primary\">\r\n                    Grammar Check\r\n                </Button>\r\n                <Button onClick={handleClickOpen('paper')} size=\"small\" variant=\"outlined\" color=\"primary\" style={{marginLeft: '10px'}}>\r\n                    Full Text\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        \r\n        </Card>\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            scroll={scroll}\r\n            aria-labelledby=\"scroll-dialog-title\"\r\n            aria-describedby=\"scroll-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"scroll-dialog-title\">Full Text for {props.doc._source.uuid}</DialogTitle>\r\n            <DialogContent dividers={scroll === 'paper'}>\r\n            <DialogContentText\r\n                id=\"scroll-dialog-description\"\r\n                ref={descriptionElementRef}\r\n                tabIndex={-1}\r\n            >\r\n                {props.doc._source.ocr_text}\r\n            </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n                Close\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n\r\n        <Dialog fullScreen open={grammarOpen} onClose={handleGrammarClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleGrammarClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Grammar Check for {props.doc._source.uuid}\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <TableView uuid={props.doc._source.uuid}/>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\rajkc\\Desktop\\CSCI 5253\\Project\\frontend\\src\\tableview.js",["42","43"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport axios from \"axios\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\nconst columns = [\r\n  { label: 'Erroneous Sentence', id: 'errorneous_sentence', minWidth: 170 },\r\n  { label: 'Error Detected', id: 'error_detected', minWidth: 100 },\r\n  {\r\n    label: 'Additional Info',\r\n    id: 'additional_info',\r\n    minWidth: 170,\r\n  },\r\n  {\r\n    label: 'Error Word/Phrase',\r\n    id: 'error_word_phrase',\r\n    minWidth: 170,\r\n  },\r\n  {\r\n    label: 'Possible Replacements',\r\n    id: 'possible_replacements',\r\n    minWidth: 170,\r\n  },\r\n];\r\n\r\nfunction createData(errorneous_sentence, error_detected, additional_info, error_word_phrase, possible_replacements) {\r\n  return { errorneous_sentence, error_detected, additional_info, error_word_phrase, possible_replacements };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%'\r\n  },\r\n  container: {\r\n    maxHeight: '900px',\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable(props) {\r\n  const classes = useStyles();\r\n  let isLoading = false;\r\n  const [results, setResults] = React.useState(null);\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  React.useEffect(() => {\r\n    checkGrammar(props.uuid)\r\n  },[]);\r\n  \r\n  let checkGrammar = (uuid) => {\r\n    isLoading = true;\r\n    axios\r\n        .get(`https://35.239.61.25:5000/grammar`, {\r\n            params: {\r\n                uuid: uuid\r\n            }\r\n        })\r\n        .then(({ data }) => {\r\n            console.log(data)\r\n\r\n            let rows = []\r\n            let i,j;\r\n            for (i = 0; i < data.length; i++) {\r\n                let possible_replacements = \"\"\r\n                if (data[i].replacements.length > 0) {\r\n                    for (j = 0; j < data[i].replacements.length - 1; j++) {\r\n                        possible_replacements += data[i].replacements[j].value + \", \"\r\n                    }\r\n                    possible_replacements += data[i].replacements[j].value\r\n                }\r\n                let offset = data[i].context.offset\r\n                let length = data[i].context.length\r\n                let first_half = data[i].context.text.substr(0, offset)\r\n                let second_half = data[i].context.text.substr(offset + length, data[i].sentence.length)\r\n                let incorrect_word = data[i].context.text.substr(offset, length)\r\n                let full_string = <div><span style={{color:\"#000000\"}}>{first_half}</span> <span style={{color:\"#ff0000\", background: \"#FFFF00\"}}>{incorrect_word}</span><span style={{color:\"#000000\"}}>{second_half}</span></div>\r\n                rows.push(createData(full_string, data[i].shortMessage, data[i].message, incorrect_word, possible_replacements))\r\n            } \r\n            setResults(rows)\r\n            isLoading = false;\r\n            enqueueSnackbar('Grammar Check Successful!', {variant: 'success'});\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            isLoading = false;\r\n            enqueueSnackbar('Something went wrong while fetching documents. Please refresh.', {variant: 'error'});\r\n        })\r\n  }\r\n\r\n  return (\r\n    \r\n    <Paper className={classes.root}>\r\n        {!isLoading && results? (\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                    {columns.map((column) => (\r\n                        <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                        >\r\n                        {column.label}\r\n                        </TableCell>\r\n                    ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {results.map((row) => {\r\n                    return (\r\n                        <TableRow hover tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                                {value}\r\n                            </TableCell>\r\n                            );\r\n                        })}\r\n                        </TableRow>\r\n                    );\r\n                    })}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            ) : <LinearProgress color=\"secondary\"/>\r\n        }\r\n    </Paper>\r\n    \r\n  );\r\n}\r\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":77,"column":10,"nodeType":"50","messageId":"51","endLine":77,"endColumn":23},{"ruleId":"48","severity":1,"message":"53","line":80,"column":28,"nodeType":"50","messageId":"51","endLine":80,"endColumn":41},{"ruleId":"54","severity":1,"message":"55","line":85,"column":17,"nodeType":"56","endLine":85,"endColumn":21},{"ruleId":"57","severity":1,"message":"58","line":209,"column":46,"nodeType":"59","messageId":"60","endLine":209,"endColumn":48},{"ruleId":"61","severity":1,"message":"62","line":110,"column":77,"nodeType":"63","endLine":110,"endColumn":188},{"ruleId":"48","severity":1,"message":"53","line":51,"column":28,"nodeType":"50","messageId":"51","endLine":51,"endColumn":41},{"ruleId":"54","severity":1,"message":"64","line":55,"column":5,"nodeType":"65","endLine":55,"endColumn":7,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'tempDocuments' is assigned a value but never used.","'closeSnackbar' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'isLoading' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook React.useEffect has missing dependencies: 'checkGrammar' and 'props.uuid'. Either include them or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [checkGrammar, props.uuid]",{"range":"72","text":"73"},[1691,1693],"[checkGrammar, props.uuid]"]